float data[75] = {-87.17307638,-109.5495333,11.00037444,163.4286511,199.1497693,123.5660003,56.25558579,11.87495703,-18.97729813,-42.98507139,-49.50432452,-44.95819516,-33.93206642,-28.58275615,-31.58109989,-41.0802992,-54.49307368,-68.26273259,-80.63560247,-89.53265601,-97.96825536,-104.8688265,-109.0354357,-55.42792547,102.4289065,215.9352907,173.6592794,95.27713062,38.69934301,2.586699113,-27.11808597,-41.50592056,-38.88116345,-27.52106187,-19.43972127,-21.31888102,-29.19861314,-42.08703327,-57.83191118,-69.53303635,-80.46281953,-88.35226795,-94.97094082,-102.2065852,-97.71319214,4.172319927,174.7275931,221.5697151,147.842936,75.61863429,28.48903346,-4.64088307,-29.76995187,-35.85962812,-27.26819387,-12.26373734,-5.602559446,-9.189517172,-21.48116953,-38.07938735,-52.01784737,-63.35879895,-71.93471855,-79.04261272,-85.4265121,-86.88364206,-9.984335526,167.9810654,251.6113399,182.1367896,108.0062751,59.54909365,24.89964724,-5.472668004,-17.77934267};
float p = 0;
float x[75];
float N = 75;
double w_real[75][75];
double w_imag[75][75];
double X_real[75];
double X_imag[75];
double X_mag_resp[75];
float Pi = 3.14159;
float inex;
float peak;
float PR = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

}

void loop() 
{

  // Moving Average
  for (int i = 0; i< 75; i++)
  { 
    p = 0;
    if (i<8)
      {for(int k=0; k<i; k++)
        {p += data[i-k];
          }
        }
    else
    {for(int j=0; j<8; j++)
      {
        p += data[i-j];
        }
      }
    x[i] = p;
  }

  ///DFT Computation
  for (int k = 0; k < N; k++)
  { 
    X_real[k] = 0;
    X_imag[k] = 0;
    X_mag_resp[k] = 0;
    
    for(int n = 0; n < N; n++)
    {
      w_real[k][n] = 0;
      w_imag[k][n] = 0;
      w_real[k][n] = cos(2 * Pi * k * n / N);
      w_imag[k][n] = -sin(2 * Pi * k * n / N);
      X_real[k] += x[n] * w_real[k][n];
      X_imag[k] += x[n] * w_imag[k][n];
      X_mag_resp[k] += sqrt(X_real[k] * X_real[k] + X_imag[k] * X_imag[k]);
    }
  }

  //Plotting the Magnitude Response
  for (int n = 0; n < N; n++)
  {
    Serial.println(X_mag_resp[n]);
  }

  //Getting the maximum value
  peak = 0;
  inex = 0;
 
  for (int n = 0; n < N; n++)
  {
    if (peak < X_mag_resp[n])
    {
      peak = X_mag_resp[n];
      inex = n;
    }
   }

  PR = 60 * (N  - inex) * 25 / N;
//  Serial.println(PR);
  
}
  
